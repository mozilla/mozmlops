# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  pre-merge-job:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/python:3.12.3

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # look for existing cache and restore if found
      - restore_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
      # install dependencies
      - run:
          name: "install dependencies"
          command: poetry install
      # save any changes to the cache
      - save_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
          paths:
            - env
      - run:
          name: "Unit tests"
          command: "poetry run pytest"
      - run:
          name: "Linting check"
          command: "poetry run ruff check"
      - run:
          name: "Format check"
          command: "poetry run ruff format --check"
      - run:
          name: "Integration tests"
          # These commands load our application credentials from the service account
          # So that we can run the integration tests.
          # See https://cloud.google.com/docs/authentication/production
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
            poetry run pytest -m integration
      - run:
          name: "Running a flow"
          # These commands load our application credentials from the service account
          # So that we can run the integration tests.
          # See https://cloud.google.com/docs/authentication/production
          command: |
            outerbounds configure $OB_DEFAULT_PERIMETER_CONFIG_KEY
            cd src/mozmlops/templates
            python template_flow.py --no-pylint run 


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  pre-merge-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - pre-merge-job:
          # Provides environment variables needed to integrate with GCS for integration tests
         context: data-eng-circleci-tests

